digraph "classes_CRVCIOIS" {
rankdir=BT
charset="utf-8"
"NLP.adapters.extract.ExtractAdapter" [color="black", fontcolor="black", label=<{NLP.adapters.extract.ExtractAdapter|<br ALIGN="LEFT"/>|fetch_company_extracted_data(id)<br ALIGN="LEFT"/>insert_extracted_data(extracted_data, url, company_id, timestamp, methods)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"NLP.adapters.scb.SCBAdapter" [color="black", fontcolor="black", label=<{NLP.adapters.scb.SCBAdapter|wrapper<br ALIGN="LEFT"/>|aggregate_companies_by_sni()<br ALIGN="LEFT"/>delete_company_from_db(org_nr)<br ALIGN="LEFT"/>fetch_all_companies_from_api(fetch_limit)<br ALIGN="LEFT"/>fetch_all_companies_from_db(has_url)<br ALIGN="LEFT"/>fetch_codes()<br ALIGN="LEFT"/>fetch_companies_from_db_by_sni(sni_code, has_url)<br ALIGN="LEFT"/>fetch_company_by_id(id)<br ALIGN="LEFT"/>fetch_company_by_org_nr(org_nr)<br ALIGN="LEFT"/>get_company_by_url(url, try_base_domain)<br ALIGN="LEFT"/>update_url_for_company(org_nr, url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"NLP.adapters.scrape.ScrapeAdapter" [color="black", fontcolor="black", label=<{NLP.adapters.scrape.ScrapeAdapter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"NLP.adapters.train.TrainAdapter" [color="black", fontcolor="black", label=<{NLP.adapters.train.TrainAdapter|<br ALIGN="LEFT"/>|delete_all_data_sets()<br ALIGN="LEFT"/>delete_dev_set()<br ALIGN="LEFT"/>delete_test_set()<br ALIGN="LEFT"/>delete_train_set()<br ALIGN="LEFT"/>fetch_dev_set()<br ALIGN="LEFT"/>fetch_test_set()<br ALIGN="LEFT"/>fetch_train_set()<br ALIGN="LEFT"/>insert_to_dev_set(data)<br ALIGN="LEFT"/>insert_to_test_set(data)<br ALIGN="LEFT"/>insert_to_train_set(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"NLP.classes.extract.DataExtractor" [color="black", fontcolor="black", label=<{NLP.classes.extract.DataExtractor|character_filter_list : list<br ALIGN="LEFT"/>soup : NoneType<br ALIGN="LEFT"/>string_filter_list : list<br ALIGN="LEFT"/>|create_soup_from_string(raw_html)<br ALIGN="LEFT"/>extract(filter_, p_only, extract_meta, extract_body)<br ALIGN="LEFT"/>extract_simple_data()<br ALIGN="LEFT"/>open_file(file_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"NLP.classes.extract.NoBeautifulSoupObject" [color="black", fontcolor="red", label=<{NLP.classes.extract.NoBeautifulSoupObject|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"NLP.classes.google_api_wrapper.GoogleSearchAPI" [color="black", fontcolor="black", label=<{NLP.classes.google_api_wrapper.GoogleSearchAPI|api_key : NoneType<br ALIGN="LEFT"/>search_engine_id : NoneType<br ALIGN="LEFT"/>|batch_search(query_list: list[str])<br ALIGN="LEFT"/>search(query, backoff_time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"NLP.classes.mongo.DBInterface" [color="black", fontcolor="black", label=<{NLP.classes.mongo.DBInterface|mongo_client<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"NLP.classes.mongo.Schema" [color="black", fontcolor="black", label=<{NLP.classes.mongo.Schema|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"NLP.classes.scb_api_wrapper.DoesNotOwnVariable" [color="black", fontcolor="red", label=<{NLP.classes.scb_api_wrapper.DoesNotOwnVariable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"NLP.classes.scb_api_wrapper.SCBapi" [color="black", fontcolor="black", label=<{NLP.classes.scb_api_wrapper.SCBapi|api_base : str<br ALIGN="LEFT"/>api_pass : NoneType<br ALIGN="LEFT"/>cert_path<br ALIGN="LEFT"/>default_json : dict<br ALIGN="LEFT"/>json : dict<br ALIGN="LEFT"/>operator_map : dict<br ALIGN="LEFT"/>owned_vars_from_api : dict<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>variables_from_api : dict<br ALIGN="LEFT"/>|between(var: dict)<br ALIGN="LEFT"/>category(codes: list, cat)<br ALIGN="LEFT"/>contains(var: dict)<br ALIGN="LEFT"/>count(keep_json)<br ALIGN="LEFT"/>equals(var: dict)<br ALIGN="LEFT"/>exists(var: list, exists: bool)<br ALIGN="LEFT"/>fetch(address, keep_json)<br ALIGN="LEFT"/>fetch_data(r_address, body, retries)<br ALIGN="LEFT"/>get(address)<br ALIGN="LEFT"/>get_session()<br ALIGN="LEFT"/>prefix(var: dict)<br ALIGN="LEFT"/>reset_json()<br ALIGN="LEFT"/>sni(codes: list, level: int, exclusion: bool)<br ALIGN="LEFT"/>start_from(var: dict)<br ALIGN="LEFT"/>up_to(var: dict)<br ALIGN="LEFT"/>update_owned_vars()<br ALIGN="LEFT"/>update_variables()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"NLP.classes.scb_api_wrapper.VariableDoesNotExist" [color="black", fontcolor="red", label=<{NLP.classes.scb_api_wrapper.VariableDoesNotExist|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"NLP.classes.scb_api_wrapper.VariableDoesNotSupportOperation" [color="black", fontcolor="red", label=<{NLP.classes.scb_api_wrapper.VariableDoesNotSupportOperation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"NLP.classes.scraper.Scraper" [color="black", fontcolor="black", label=<{NLP.classes.scraper.Scraper|already_scraped : set<br ALIGN="LEFT"/>filter : set<br ALIGN="LEFT"/>follow_queries : set<br ALIGN="LEFT"/>headers : dict<br ALIGN="LEFT"/>scrape_output_folder<br ALIGN="LEFT"/>urls : list<br ALIGN="LEFT"/>|prune_data()<br ALIGN="LEFT"/>scrape_all(labeled_urls, follow_links, filter_)<br ALIGN="LEFT"/>scrape_one(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"NLP.adapters.extract.ExtractAdapter" -> "NLP.classes.mongo.DBInterface" [arrowhead="empty", arrowtail="none"];
"NLP.adapters.scb.SCBAdapter" -> "NLP.classes.mongo.DBInterface" [arrowhead="empty", arrowtail="none"];
"NLP.adapters.scrape.ScrapeAdapter" -> "NLP.classes.mongo.DBInterface" [arrowhead="empty", arrowtail="none"];
"NLP.adapters.train.TrainAdapter" -> "NLP.classes.mongo.DBInterface" [arrowhead="empty", arrowtail="none"];
"NLP.classes.scb_api_wrapper.SCBapi" -> "NLP.adapters.scb.SCBAdapter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wrapper", style="solid"];
}
